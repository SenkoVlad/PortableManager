@page "/resetpassword"
@inject NavigationManager navManager
@inject IAuthService authService 



<h3>ResetPassword</h3>

<h1>Register</h1>

@if (ShowMessages)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var message in Messages)
        {
            <p>@message</p>
        }
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="resetPasswordModel" OnValidSubmit="HandleReset">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="resetPasswordModel.Email" />
                <ValidationMessage For="@(() => resetPasswordModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="resetPasswordModel.Password" />
                <ValidationMessage For="@(() => resetPasswordModel.Password)" />
            </div>
            <div class="form-group">
                <label for="confirm_password">Confirm Password</label>
                <InputText Id="confirm_password" type="password" class="form-control" @bind-Value="resetPasswordModel.ConfirmPassword" />
                <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>



@code {
    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public string token { get; set; }

    private ResetPasswordResult resetPasswordResult;
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();

    private bool ShowMessages;
    private IEnumerable<string> Messages;

    protected override void OnInitialized()
    {
        StringValues userIdParam;
        StringValues tokenParam;
        StringValues emailParam;

        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("userId", out userIdParam))
            resetPasswordModel.UserId = Convert.ToString(userIdParam);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out tokenParam))
        {
            resetPasswordModel.Token = Convert.ToString(tokenParam).Replace(" ", "+");
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out emailParam))
            resetPasswordModel.Email = Convert.ToString(emailParam);
    }

    private async System.Threading.Tasks.Task HandleReset()
    {
        ShowMessages = false;
        resetPasswordResult = await authService.ResetPasswordAsync(resetPasswordModel);

        if (resetPasswordResult.ShowMessages)
        {
            ShowMessages = resetPasswordResult.ShowMessages;
            Messages = resetPasswordResult.Messages;

            navManager.NavigateTo("/login");
        }
    }
}
