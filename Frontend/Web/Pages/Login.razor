@page "/login"
@inject IAuthService _authService
@inject NavigationManager NavigationManager

<h1>Login</h1>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
            <a href="/forgotpassword">Забыл пароль</a>
            <DataAnnotationsValidator />
        </EditForm>
    </div>
</div>

@if(Messages != null)
{
<div class="alert alert-primary" role="alert">
    @foreach (var message in Messages)
    {
        <p>@message</p>
    }
</div>
}

@code {

    private LoginModel loginModel = new LoginModel();
    private ConfirmEmailModel confirmEmailModel = new ConfirmEmailModel();
    private ConfirmEmailResult confirmEmailResult = new ConfirmEmailResult();

    private IEnumerable<string> Messages;

    protected async override System.Threading.Tasks.Task OnInitializedAsync()
    {
        StringValues userIdParam;
        StringValues tokenParam;
        StringValues emailParam;

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("userId", out userIdParam))
            confirmEmailModel.UserId = Convert.ToString(userIdParam);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out tokenParam))
            confirmEmailModel.Token = Convert.ToString(tokenParam).Replace(" ", "+");

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out emailParam))
            confirmEmailModel.Email = Convert.ToString(emailParam);

        if (IsConfirmModelValid())
        {
            confirmEmailResult = await _authService.ConfirmateEmailAsync(confirmEmailModel);
            Messages = confirmEmailResult.Messages;

            if(confirmEmailResult.Status == true)
            {
                loginModel.Email = confirmEmailModel.Email;
            }
        }
    }

    private bool IsConfirmModelValid()
    {
        return !string.IsNullOrWhiteSpace(confirmEmailModel.Email) &&
               !string.IsNullOrWhiteSpace(confirmEmailModel.Token) &&
               !string.IsNullOrWhiteSpace(confirmEmailModel.UserId);
    }

    private async System.Threading.Tasks.Task HandleLogin()
    {

        var result = await _authService.LoginAsync(loginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Messages = new string[] { result.Error };
        }
    }
}